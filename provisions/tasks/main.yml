---
# tasks file for provisions
- name: Job 00 | Set timezone to Europe/Berlin
  timezone:
    name: Europe/Berlin
#
- name: Job 01 | Create group
  group:
    name: "{{item}}"
    state: present
  loop: "{{ users[1].groups }}" # works but 1 array only
  #msg: "{{ bands.keys() }}"
  # https://www.redhat.com/sysadmin/ansible-lists-dictionaries-yaml
  #tags: test

  #loop: "{{ users['groups'] }}"
  # loop:
  #   - docker
  #   - ibrahim

# - name:
#   group:
#     name:  # required. Name of the group to manage.
#     gid:  # not required. Optional I(GID) to set for the group.
#     state: absent # not required. choices: absent;present. Whether the group should be present or not on the remote host.
#     system: False # not required. If I(yes), indicates that the group created is a system group.
#     local: False # not required. Forces the use of "local" command alternatives on platforms that implement it. This is useful in environments that use centralized authentication when you want to manipulate the local groups. (e.g. it uses C(lgroupadd) instead of C(groupadd)). This requires that these commands exist on the targeted host, otherwise it will be a fatal error.
#     non_unique: False # not required. This option allows to change the group ID to a non-unique value. Requires C(gid). Not supported on macOS or BusyBox distributions.

# - name: Job-1001 | Add/Update deployment user.
#   user:
#     name: ibrahim # required. Name of the user to create, remove or modify.
#     shell: /bin/bash # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
#     update_password: always
#     password: "{{ localhost_become_pass | password_hash('sha512') }}"
#     create_home: True
#     state: present # not required. choices: absent;present. Whether the account should exist or not, taking action if the state is different from what is stated.
#
# Disable root login and use `sudo`.
- name: Job 02 | Add sudo rights for deployment user.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^ibrahim'
    line: 'ibrahim ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'
  when: ansible_os_family == 'Debian'
#
# - name: Job-1003 | Copy deployment user's home files in place.
#   copy:
#     src: "files/home/ibrahim"
#     dest: "/home"
#     owner: ibrahim
#     group: ibrahim
#     mode: 0644
#   when: prvs_copy_home

# - name: Job-1004 | Update root password.
#   user:
#     name: root
#     shell: /bin/bash # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
#     update_password: always
#     password: "{{ localhost_become_pass | password_hash('sha512') }}"
#     create_home: True
#     state: present
#   when: prvs_root_passwd
#
- name: Job 03 | creating users and groups
  user:
    name: "{{item.name}}"
    update_password: always
    shell: "{{item.shell}}"
    groups: "{{item.groups}}" #"{{lookup('item', 'groups')}}"
    password: "{{ localhost_become_pass | password_hash('sha512') }}"
    append: "{{item.append}}"
    create_home: True
    #local: "{{item.local}}"
    state: present
  loop: "{{ users }}"
    #"{{ lookup('vars', 'somevar_' ~ other_var) }}"
  #tags: test
#
# the 'item.key' must match the username for it to work
- name: Job 04 | add public keys to users's authorized_key
  authorized_key:
    user: "{{item.name}}"
    state: "{{item.state}}"
    key: "{{ lookup('file', 'files/authorized_key/{{item.key}}') }}"
  loop: "{{ users }}"
  #when: "{{item.host}}" == 'all' or {{item.host}} == ansible_hostname
  tags:
    - #test
#
- name: Job 05 | creating LOCAL users and groups
  user:
    name: "{{item.name}}"
    update_password: on_create #always
    shell: "{{item.shell}}"
    #groups: "{{item.groups}}" #"{{lookup('item', 'groups')}}"
    password: "{{ localhost_become_pass | password_hash('sha512') }}"
    append: "{{item.append}}"
    create_home: True
    #local: "{{item.local}}"
    state: present
  #when: ansible_hostname == item.hosts
  loop: "{{ localusers }}"
    #"{{ lookup('vars', 'somevar_' ~ other_var) }}"
  #tags: test
#
# the 'item.key' must match the username for it to work
- name: Job 06 | add public keys to LOCAL users's authorized_key
  authorized_key:
    user: "{{item.name}}"
    state: "{{item.state}}"
    key: "{{ lookup('file', 'files/authorized_key/{{item.key}}') }}"
  #when: ansible_hostname == item.hosts
  loop: "{{ localusers }}"
  #when: "{{item.host}}" == 'all' or {{item.host}} == ansible_hostname
  tags:
    - #test
#
#
- name: Job 99 | Check if reboot required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Job 06 | Reboot if required
  reboot:
  when: reboot_required_file.stat.exists == true
#
#
# openssl rsa -in mobile.key -pubout > mobile.pub
# ssh-keygen -y -f mobile.key > mobile.pub


