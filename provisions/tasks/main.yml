---
# tasks file for provisions
- name: Job-00 | Set timezone to Europe/Berlin
  timezone:
    name: Europe/Berlin

- name: Job-01 | Create group
  group:
    name: "{{item}}"
    state: present
  loop: "{{ users[1].groups }}" # works but 1 array only
  #msg: "{{ bands.keys() }}"
  # https://www.redhat.com/sysadmin/ansible-lists-dictionaries-yaml
  #tags: test

  #loop: "{{ users['groups'] }}"
  # loop:
  #   - docker
  #   - ibrahim

# - name:
#   group:
#     name:  # required. Name of the group to manage.
#     gid:  # not required. Optional I(GID) to set for the group.
#     state: absent # not required. choices: absent;present. Whether the group should be present or not on the remote host.
#     system: False # not required. If I(yes), indicates that the group created is a system group.
#     local: False # not required. Forces the use of "local" command alternatives on platforms that implement it. This is useful in environments that use centralized authentication when you want to manipulate the local groups. (e.g. it uses C(lgroupadd) instead of C(groupadd)). This requires that these commands exist on the targeted host, otherwise it will be a fatal error.
#     non_unique: False # not required. This option allows to change the group ID to a non-unique value. Requires C(gid). Not supported on macOS or BusyBox distributions.

# - name: Job-1001 | Add/Update deployment user.
#   user:
#     name: ibrahim # required. Name of the user to create, remove or modify.
#     shell: /bin/bash # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
#     update_password: always
#     password: "{{ localhost_become_pass | password_hash('sha512') }}"
#     create_home: True
#     state: present # not required. choices: absent;present. Whether the account should exist or not, taking action if the state is different from what is stated.

# Disable root login and use `sudo`.
- name: Job-1002 | Add sudo rights for deployment user.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^ibrahim'
    line: 'ibrahim ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'
  when: ansible_os_family == 'Debian' and ansible_hostname != 'virthost01'

# - name: Job-1003 | Copy deployment user's home files in place.
#   copy:
#     src: "files/home/ibrahim"
#     dest: "/home"
#     owner: ibrahim
#     group: ibrahim
#     mode: 0644
#   when: prvs_copy_home

# - name: Job-1004 | Update root password.
#   user:
#     name: root
#     shell: /bin/bash # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
#     update_password: always
#     password: "{{ localhost_become_pass | password_hash('sha512') }}"
#     create_home: True
#     state: present
#   when: prvs_root_passwd

- name: Job-05 | creating users and groups
  user:
    name: "{{item.name}}"
    update_password: always
    shell: "{{item.shell}}"
    groups: "{{item.groups}}" #"{{lookup('item', 'groups')}}"
    password: "{{ localhost_become_pass | password_hash('sha512') }}"
    append: "{{item.append}}"
    create_home: True
    #local: "{{item.local}}"
    state: present
  loop: "{{ users }}"
    #"{{ lookup('vars', 'somevar_' ~ other_var) }}"
  #tags: test

- name: Job-06 | adding user's public keys to authorized_key
  authorized_key:
    user: "{{item.name}}"
    state: "{{item.state}}"
    key: "{{ lookup('file', 'files/authorized_key/{{item.key}}') }}"
  loop: "{{ users }}"
  #when: "{{item.host}}" == 'all' or {{item.host}} == ansible_hostname

# # test
# - name:
#   user:
#     name:  # required. Name of the user to create, remove or modify.
#     uid:  # not required. Optionally sets the I(UID) of the user.
#     comment:  # not required. Optionally sets the description (aka I(GECOS)) of user account.
#     hidden:  # not required. macOS only, optionally hide the user from the login window and system preferences. The default will be C(yes) if the I(system) option is used.
#     non_unique: False # not required. Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
#     seuser:  # not required. Optionally sets the seuser type (user_u) on selinux enabled systems.
#     group:  # not required. Optionally sets the user's primary group (takes a group name).
#     groups:  # not required. List of groups user will be added to. When set to an empty string C(''), the user is removed from all groups except the primary group. Before Ansible 2.3, the only input format allowed was a comma separated string. Mutually exclusive with C(local)
#     append: False # not required. If C(yes), add the user to the groups specified in C(groups). If C(no), user will only be added to the groups specified in C(groups), removing them from all other groups. Mutually exclusive with C(local)
#     shell:  # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
#     home:  # not required. Optionally set the user's home directory.
#     skeleton:  # not required. Optionally set a home skeleton directory. Requires C(create_home) option!
#     password:  # not required. Optionally set the user's password to this crypted value. On macOS systems, this value has to be cleartext. Beware of security issues. To create a disabled account on Linux systems, set this to C('!') or C('*'). To create a disabled account on OpenBSD, set this to C('*************'). See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module) for details on various ways to generate these password values.
#     state: absent # not required. choices: absent;present. Whether the account should exist or not, taking action if the state is different from what is stated.
#     create_home: True # not required. Unless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist. Changed from C(createhome) to C(create_home) in Ansible 2.5.
#     move_home: False # not required. If set to C(yes) when used with C(home: ), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists.
#     system: False # not required. When creating an account C(state=present), setting this to C(yes) makes the user a system account. This setting cannot be changed on existing users.
#     force: False # not required. This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms. The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support. When used with C(generate_ssh_key=yes) this forces an existing key to be overwritten.
#     remove: False # not required. This only affects C(state=absent), it attempts to remove directories associated with the user. The behavior is the same as C(userdel --remove), check the man page for details and support.
#     login_class:  # not required. Optionally sets the user's login class, a feature of most BSD OSs.
#     generate_ssh_key: False # not required. Whether to generate a SSH key for the user in question. This will B(not) overwrite an existing SSH key unless used with C(force=yes).
#     ssh_key_bits: "default set by ssh-keygen" # not required. Optionally specify number of bits in SSH key to create.
#     ssh_key_type: rsa # not required. Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.
#     ssh_key_file:  # not required. Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's home directory. This parameter defaults to I(.ssh/id_rsa).
#     ssh_key_comment: "ansible-generated on $HOSTNAME" # not required. Optionally define the comment for the SSH key.
#     ssh_key_passphrase:  # not required. Set a passphrase for the SSH key. If no passphrase is provided, the SSH key will default to having no passphrase.
#     update_password: always # not required. choices: always;on_create. C(always) will update passwords if they differ. C(on_create) will only set the password for newly created users.
#     expires:  # not required. An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD. Since Ansible 2.6 you can remove the expiry time specify a negative value. Currently supported on GNU/Linux and FreeBSD.
#     password_lock:  # not required. Lock the password (usermod -L, pw lock, usermod -C). BUT implementation differs on different platforms, this option does not always mean the user cannot login via other methods. This option does not disable the user, only lock the password. Do not change the password in the same task. Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD.
#     local: False # not required. Forces the use of "local" command alternatives on platforms that implement it. This is useful in environments that use centralized authentification when you want to manipulate the local users (i.e. it uses C(luseradd) instead of C(useradd)). This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database exists somewhere other than C(/etc/passwd), this setting will not work properly. This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error. Mutually exclusive with C(groups) and C(append)
#     profile:  # not required. Sets the profile of the user. Does nothing when used with other platforms. Can set multiple profiles using comma separation. To delete all the profiles, use C(profile=''). Currently supported on Illumos/Solaris.
#     authorization:  # not required. Sets the authorization of the user. Does nothing when used with other platforms. Can set multiple authorizations using comma separation. To delete all authorizations, use C(authorization=''). Currently supported on Illumos/Solaris.
#     role:  # not required. Sets the role of the user. Does nothing when used with other platforms. Can set multiple roles using comma separation. To delete all roles, use C(role=''). Currently supported on Illumos/Solaris.