#- name: create new volume
#  community.docker.docker_volume:
#    name: portainer-data
#
# TODO: add passwords to vault
#       set folder permissions via ansible during installation
# https://docs.ansible.com/ansible/latest/collections/community/docker/docker_compose_module.html
- name: Job 00 | Deploy semaphore
  community.docker.docker_compose:
    #working_dir: "/opt/docker/semaphore-3002/"
    project_name: semaphore
    definition:
      version: "2"
      services:
        mysql:
          container_name: ansiblemysql
          image: mysql:8.0
          hostname: mysql
          volumes:
            - /opt/docker/semaphore-3002/semaphore-mysql:/var/lib/mysql
          environment:
            - MYSQL_RANDOM_ROOT_PASSWORD=yes
            - MYSQL_DATABASE=semaphore
            - MYSQL_USER=semaphore
            - MYSQL_PASSWORD={{ansible_become_pass}}  # change!
          restart: always
        semaphore:
          container_name: ansiblesemaphore
          image: semaphoreui/semaphore:latest
          user: "${UID}:${GID}"
          ports:
            - 3002:3000
          environment:
            - SEMAPHORE_DB_USER=semaphore
            - SEMAPHORE_DB_PASS={{ansible_become_pass}}  # change!
            - SEMAPHORE_DB_HOST=mysql
            - SEMAPHORE_DB_PORT=3306
            - SEMAPHORE_DB_DIALECT=mysql
            - SEMAPHORE_DB=semaphore
            - SEMAPHORE_PLAYBOOK_PATH=/tmp/semaphore/
            - SEMAPHORE_ADMIN_PASSWORD={{ansible_become_pass}}  # change!
            - SEMAPHORE_ADMIN_NAME=admin
            - SEMAPHORE_ADMIN_EMAIL=admin@localhost
            - SEMAPHORE_ADMIN=admin
            - SEMAPHORE_ACCESS_KEY_ENCRYPTION=  # add to your access key encryption !
            - ANSIBLE_HOST_KEY_CHECKING=false  # (optional) change to true if you want to enable host key checking
          volumes:
            - /opt/docker/semaphore-3002/inventory:/inventory:ro
            - /opt/docker/semaphore-3002/authorized-keys:/authorized-keys:ro
            - /opt/docker/semaphore-3002/config:/etc/semaphore:rw
          restart: always
          depends_on:
            - mysql
  when: instl_docker_pckg and dckr_dpl_semaphore
  register: output
  #tags: test
  #
  # for debug purpose only - disabled in the meantime
# - name: Show results
#   ansible.builtin.debug:
#     var: output
#   #tags: test
  #
- name: Verify that semaphore and db services are running
  ansible.builtin.assert:
    that:
      - "output.services.semaphore.ansiblesemaphore.state.running"
      - "output.services.mysql.ansiblemysql.state.running"
  #tags: test

# # https://mariushosting.com/docker/

# docker_compose:
#   project_src:  # not required. Path to a directory containing a C(docker-compose.yml) or C(docker-compose.yaml) file. Mutually exclusive with I(definition). Required when no I(definition) is provided.
#   project_name:  # not required. Provide a project name. If not provided, the project name is taken from the basename of I(project_src). Required when I(definition) is provided.
#   files:  # not required. List of Compose file names relative to I(project_src). Overrides C(docker-compose.yml) or C(docker-compose.yaml). Files are loaded and merged in the order given.
#   state: present # not required. choices: absent;present. Desired state of the project. Specifying C(present) is the same as running C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)). Specifying C(absent) is the same as running C(docker-compose down).
#   services:  # not required. When I(state) is C(present) run C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)) on a subset of services. If empty, which is the default, the operation will be performed on all services defined in the Compose file (or inline I(definition)).
#   scale:  # not required. When I(state) is C(present) scale services. Provide a dictionary of key/value pairs where the key is the name of the service and the value is an integer count for the number of containers.
#   dependencies: True # not required. When I(state) is C(present) specify whether or not to include linked services.
#   definition:  # not required. Compose file describing one or more services, networks and volumes. Mutually exclusive with I(project_src) and I(files).
#   hostname_check: False # not required. Whether or not to check the Docker daemon's hostname against the name provided in the client certificate.
#   recreate: always # not required. choices: always;never;smart. By default containers will be recreated when their configuration differs from the service definition. Setting to C(never) ignores configuration differences and leaves existing containers unchanged. Setting to C(always) forces recreation of all existing containers.
#   build: False # not required. Use with I(state) C(present) to always build images prior to starting the application. Same as running C(docker-compose build) with the pull option. Images will only be rebuilt if Docker detects a change in the Dockerfile or build directory contents. Use the I(nocache) option to ignore the image cache when performing the build. If an existing image is replaced, services using the image will be recreated unless I(recreate) is C(never).
#   pull: False # not required. Use with I(state) C(present) to always pull images prior to starting the application. Same as running C(docker-compose pull). When a new image is pulled, services using the image will be recreated unless I(recreate) is C(never).
#   nocache: False # not required. Use with the I(build) option to ignore the cache during the image build process.
#   remove_images: all # not required. choices: all;local. Use with I(state) C(absent) to remove all images or only local images.
#   remove_volumes: False # not required. Use with I(state) C(absent) to remove data volumes.
#   stopped: False # not required. Use with I(state) C(present) to stop all containers defined in the Compose file. If I(services) is defined, only the containers listed there will be stopped.
#   restarted: False # not required. Use with I(state) C(present) to restart all containers defined in the Compose file. If I(services) is defined, only the containers listed there will be restarted.
#   remove_orphans: False # not required. Remove containers for services not defined in the Compose file.
#   timeout: 10 # not required. timeout in seconds for container shutdown when attached or when containers are already running.
#   docker_host: unix://var/run/docker.sock # not required. The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https). If the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.
#   tls_hostname: localhost # not required. When verifying the authenticity of the Docker Host server, provide the expected name of the server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.
#   api_version: auto # not required. The version of the Docker API running on the Docker Host. Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon. If the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.
#   ca_cert:  # not required. Use a CA certificate when performing server verification by providing the path to a CA certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   client_cert:  # not required. Path to the client's TLS certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   client_key:  # not required. Path to the client's TLS key file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   ssl_version:  # not required. Provide a valid SSL version number. Default value determined by ssl.py module. If the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.
#   tls: False # not required. Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.
#   validate_certs: False # not required. Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.
#   debug: False # not required. Debug mode