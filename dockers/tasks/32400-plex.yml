# - name: Mount mediafiles (NFS volume)
#   ansible.posix.mount:
#     src: 10.0.0.131:/mnt/Pool03-Data/mediafiles
#     path: /net/mediafiles
#     opts: rw,sync,hard
#     #state: mounted
#     state: absent
#     fstype: nfs
#   when: instl_docker_pckg and dckr_dpl_plex
#   tags:
#     - test
# #
- name: add user to group
  user:
    name: ibrahim@skyline # required. Name of the user to create, remove or modify.
    #uid:  # not required. Optionally sets the I(UID) of the user.
    #comment:  # not required. Optionally sets the description (aka I(GECOS)) of user account.
    #hidden:  # not required. macOS only, optionally hide the user from the login window and system preferences. The default will be C(yes) if the I(system) option is used.
    #non_unique: False # not required. Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
    #seuser:  # not required. Optionally sets the seuser type (user_u) on selinux enabled systems.
    #group:  docker # not required. Optionally sets the user's primary group (takes a group name).
    groups:  sudo, docker # not required. List of groups user will be added to. When set to an empty string C(''), the user is removed from all groups except the primary group. Before Ansible 2.3, the only input format allowed was a comma separated string. Mutually exclusive with C(local)
    append: true # not required. If C(yes), add the user to the groups specified in C(groups). If C(no), user will only be added to the groups specified in C(groups), removing them from all other groups. Mutually exclusive with C(local)
    #shell:  # not required. Optionally set the user's shell. On macOS, before Ansible 2.5, the default shell for non-system users was C(/usr/bin/false). Since Ansible 2.5, the default shell for non-system users on macOS is C(/bin/bash). On other operating systems, the default shell is determined by the underlying tool being used. See Notes for details.
    #home:  # not required. Optionally set the user's home directory.
    #skeleton:  # not required. Optionally set a home skeleton directory. Requires C(create_home) option!
    #password:  # not required. Optionally set the user's password to this crypted value. On macOS systems, this value has to be cleartext. Beware of security issues. To create a disabled account on Linux systems, set this to C('!') or C('*'). To create a disabled account on OpenBSD, set this to C('*************'). See U(https://docs.ansible.com/ansible/faq.html#how-do-i-generate-encrypted-passwords-for-the-user-module) for details on various ways to generate these password values.
    #state: absent # not required. choices: absent;present. Whether the account should exist or not, taking action if the state is different from what is stated.
    #create_home: True # not required. Unless set to C(no), a home directory will be made for the user when the account is created or if the home directory does not exist. Changed from C(createhome) to C(create_home) in Ansible 2.5.
    #move_home: False # not required. If set to C(yes) when used with C(home: ), attempt to move the user's old home directory to the specified directory if it isn't there already and the old home exists.
    #system: False # not required. When creating an account C(state=present), setting this to C(yes) makes the user a system account. This setting cannot be changed on existing users.
    #force: False # not required. This only affects C(state=absent), it forces removal of the user and associated directories on supported platforms. The behavior is the same as C(userdel --force), check the man page for C(userdel) on your system for details and support. When used with C(generate_ssh_key=yes) this forces an existing key to be overwritten.
    #remove: False # not required. This only affects C(state=absent), it attempts to remove directories associated with the user. The behavior is the same as C(userdel --remove), check the man page for details and support.
    #login_class:  # not required. Optionally sets the user's login class, a feature of most BSD OSs.
    #generate_ssh_key: False # not required. Whether to generate a SSH key for the user in question. This will B(not) overwrite an existing SSH key unless used with C(force=yes).
    #ssh_key_bits: "default set by ssh-keygen" # not required. Optionally specify number of bits in SSH key to create.
    #ssh_key_type: rsa # not required. Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation present on target host.
    #ssh_key_file:  # not required. Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's home directory. This parameter defaults to I(.ssh/id_rsa).
    #ssh_key_comment: "ansible-generated on $HOSTNAME" # not required. Optionally define the comment for the SSH key.
    #ssh_key_passphrase:  # not required. Set a passphrase for the SSH key. If no passphrase is provided, the SSH key will default to having no passphrase.
    #update_password: always # not required. choices: always;on_create. C(always) will update passwords if they differ. C(on_create) will only set the password for newly created users.
    #expires:  # not required. An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently supported on GNU/Linux, FreeBSD, and DragonFlyBSD. Since Ansible 2.6 you can remove the expiry time specify a negative value. Currently supported on GNU/Linux and FreeBSD.
    #password_lock:  # not required. Lock the password (usermod -L, pw lock, usermod -C). BUT implementation differs on different platforms, this option does not always mean the user cannot login via other methods. This option does not disable the user, only lock the password. Do not change the password in the same task. Currently supported on Linux, FreeBSD, DragonFlyBSD, NetBSD, OpenBSD.
    #local: False # not required. Forces the use of "local" command alternatives on platforms that implement it. This is useful in environments that use centralized authentification when you want to manipulate the local users (i.e. it uses C(luseradd) instead of C(useradd)). This will check C(/etc/passwd) for an existing account before invoking commands. If the local account database exists somewhere other than C(/etc/passwd), this setting will not work properly. This requires that the above commands as well as C(/etc/passwd) must exist on the target host, otherwise it will be a fatal error. Mutually exclusive with C(groups) and C(append)
    #profile:  # not required. Sets the profile of the user. Does nothing when used with other platforms. Can set multiple profiles using comma separation. To delete all the profiles, use C(profile=''). Currently supported on Illumos/Solaris.
    #authorization:  # not required. Sets the authorization of the user. Does nothing when used with other platforms. Can set multiple authorizations using comma separation. To delete all authorizations, use C(authorization=''). Currently supported on Illumos/Solaris.
    #role:  # not required. Sets the role of the user. Does nothing when used with other platforms. Can set multiple roles using comma separation. To delete all roles, use C(role=''). Currently supported on Illumos/Solaris.
  tags:
    - #test  
#
- name: Mount ephemeral SMB volume
  block:
  - name: Mount ephemeral SMB volume
    ansible.posix.mount:
      src: //10.0.0.131/mediafiles
      path: /net/mediafiles
      #opts: "rw,vers=3,file_mode=0640,dir_mode=0740,dom=skyline,username=ibrahim,password={{ localhost_become_pass }}"
      opts: "rw,vers=3,file_mode=0777,dir_mode=0777,username=ibrahim@skyline,password={{ localhost_become_pass }}"
      #opts: "rw,vers=3,file_mode=0644,dir_mode=0744,username=root,password={{ localhost_become_pass }}"
      fstype: cifs
      #state: present
      state: ephemeral
  when: instl_docker_pckg and dckr_dpl_plex
  # become: false
  # become_user: ibrahim    
  tags:
    - #test
#
#
- name: Mount ephemeral SMB volume
  block:
  - name: Mount ephemeral SMB volume
    ansible.posix.mount:
      src: //10.1.0.131/users/plex
      path: /net/plex
      #opts: "rw,vers=3,file_mode=0640,dir_mode=0740,dom=skyline,username=ibrahim,password={{ localhost_become_pass }}"
      opts: "rw,vers=3,file_mode=0777,dir_mode=0777,username=ibrahim@skyline,password={{ localhost_become_pass }}"
      #opts: "rw,vers=3,file_mode=0644,dir_mode=0744,username=root,password={{ localhost_become_pass }}"
      fstype: cifs
      #state: present
      state: ephemeral
  when: instl_docker_pckg and dckr_dpl_plex
  # become: false
  # become_user: ibrahim    
  tags:
    - #test
#
- name: Job 00 | Deploy Plex
  community.docker.docker_compose:
    #working_dir: "/opt/docker/plex-32400/"
    #remove_images: all
    #remove_volumes: True
    #stopped: True
    #state: absent
    #
    project_name: Plex
    definition:
      version: '3.9'
      services:
        plex:
          hostname: plex.skyline.lan
          container_name: Plex_container
          image: plexinc/pms-docker:latest
          ports:
            - 32400:32400/tcp
            - 8324:8324/tcp
            - 32469:32469/tcp
            - 1900:1900/udp
            - 32410:32410/udp
            - 32412:32412/udp
            - 32413:32413/udp
            - 32414:32414/udp
          restart: always
          environment:
            - TZ=Europe/Berlin
            - PLEX_CLAIM={{plex_claim}}
            - ADVERTISE_IP=http://10.0.0.137:32400/
          #user: "${UID}:${GID}"
          user: "0:0" # root
          #user: "1354601103:1354600513" # ibrahim@skyline
          volumes:
            - /opt/docker/plex-32400/database:/config
            - /opt/docker/plex-32400/transcode:/transcode
            - /net/mediafiles:/data
  when: instl_docker_pckg and dckr_dpl_plex
  register: output
  tags:
    - #test
  #
  # for debug purpose only - disabled in the meantime
# - name: Show results
#   ansible.builtin.debug:
#     var: output
#   #tags: test
  #
- name: Verify that plex is running
  ansible.builtin.assert:
    that:
      - "output.services.plex.Plex_container.state.running"
      - #"output.services.mysql.ansiblemysql.state.running"
  when: instl_docker_pckg and dckr_dpl_plex
  tags:
    - assert
    - #test

# # https://mariushosting.com/how-to-install-gravity-on-your-synology-nas/

# docker_compose:
#   project_src:  # not required. Path to a directory containing a C(docker-compose.yml) or C(docker-compose.yaml) file. Mutually exclusive with I(definition). Required when no I(definition) is provided.
#   project_name:  # not required. Provide a project name. If not provided, the project name is taken from the basename of I(project_src). Required when I(definition) is provided.
#   files:  # not required. List of Compose file names relative to I(project_src). Overrides C(docker-compose.yml) or C(docker-compose.yaml). Files are loaded and merged in the order given.
#   state: present # not required. choices: absent;present. Desired state of the project. Specifying C(present) is the same as running C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)). Specifying C(absent) is the same as running C(docker-compose down).
#   services:  # not required. When I(state) is C(present) run C(docker-compose up) resp. C(docker-compose stop) (with I(stopped)) resp. C(docker-compose restart) (with I(restarted)) on a subset of services. If empty, which is the default, the operation will be performed on all services defined in the Compose file (or inline I(definition)).
#   scale:  # not required. When I(state) is C(present) scale services. Provide a dictionary of key/value pairs where the key is the name of the service and the value is an integer count for the number of containers.
#   dependencies: True # not required. When I(state) is C(present) specify whether or not to include linked services.
#   definition:  # not required. Compose file describing one or more services, networks and volumes. Mutually exclusive with I(project_src) and I(files).
#   hostname_check: False # not required. Whether or not to check the Docker daemon's hostname against the name provided in the client certificate.
#   recreate: always # not required. choices: always;never;smart. By default containers will be recreated when their configuration differs from the service definition. Setting to C(never) ignores configuration differences and leaves existing containers unchanged. Setting to C(always) forces recreation of all existing containers.
#   build: False # not required. Use with I(state) C(present) to always build images prior to starting the application. Same as running C(docker-compose build) with the pull option. Images will only be rebuilt if Docker detects a change in the Dockerfile or build directory contents. Use the I(nocache) option to ignore the image cache when performing the build. If an existing image is replaced, services using the image will be recreated unless I(recreate) is C(never).
#   pull: False # not required. Use with I(state) C(present) to always pull images prior to starting the application. Same as running C(docker-compose pull). When a new image is pulled, services using the image will be recreated unless I(recreate) is C(never).
#   nocache: False # not required. Use with the I(build) option to ignore the cache during the image build process.
#   remove_images: all # not required. choices: all;local. Use with I(state) C(absent) to remove all images or only local images.
#   remove_volumes: False # not required. Use with I(state) C(absent) to remove data volumes.
#   stopped: False # not required. Use with I(state) C(present) to stop all containers defined in the Compose file. If I(services) is defined, only the containers listed there will be stopped.
#   restarted: False # not required. Use with I(state) C(present) to restart all containers defined in the Compose file. If I(services) is defined, only the containers listed there will be restarted.
#   remove_orphans: False # not required. Remove containers for services not defined in the Compose file.
#   timeout: 10 # not required. timeout in seconds for container shutdown when attached or when containers are already running.
#   docker_host: unix://var/run/docker.sock # not required. The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https). If the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.
#   tls_hostname: localhost # not required. When verifying the authenticity of the Docker Host server, provide the expected name of the server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.
#   api_version: auto # not required. The version of the Docker API running on the Docker Host. Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon. If the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.
#   ca_cert:  # not required. Use a CA certificate when performing server verification by providing the path to a CA certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   client_cert:  # not required. Path to the client's TLS certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   client_key:  # not required. Path to the client's TLS key file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
#   ssl_version:  # not required. Provide a valid SSL version number. Default value determined by ssl.py module. If the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.
#   tls: False # not required. Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.
#   validate_certs: False # not required. Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.
#   debug: False # not required. Debug mode

# docker run \
# -d \
# --name plex \
# -p 32400:32400/tcp \
# -p 8324:8324/tcp \
# -p 32469:32469/tcp \
# -p 1900:1900/udp \
# -p 32410:32410/udp \
# -p 32412:32412/udp \
# -p 32413:32413/udp \
# -p 32414:32414/udp \
# -e TZ="<timezone>" \
# -e PLEX_CLAIM="<claimToken>" \
# -e ADVERTISE_IP="http://<hostIPAddress>:32400/" \
# -h <HOSTNAME> \
# -v <path/to/plex/database>:/config \
# -v <path/to/transcode/temp>:/transcode \
# -v <path/to/media>:/data \
# plexinc/pms-docker