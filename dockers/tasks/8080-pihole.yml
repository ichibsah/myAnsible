#- name: create new volume
#  community.docker.docker_volume:
#    name: portainer-data
#
- name: Job 00 | Deploy Pihole
  community.docker.docker_container:
    working_dir: "/opt/docker/"
    container_name: pihole
    ports:
        - '53:53/tcp'
        - '53:53/udp'
        - '8080:80'
    restart: always
    environment:
        - TZ=Europe/Berlin
        - VIRTUAL_HOST=pihole.zertiahmef.com
        - PROXY_LOCATION=pihole.zertiahmef.com
        - ServerIP=217.160.100.209
    volumes:
        - './docker/etc:/etc/pihole'
        - './docker/dnsmasq:/etc/dnsmasq.d'
    dns:
        - 1.1.1.1
    hostname: pihole.zertiahmef.com
    image: 'pihole/pihole:latest'
  when: dkr_copy_def_files and dckr_dpl_pihole
  tags: test

  
  # docker_container:
  #   name:  # required. Assign a name to a new container or match an existing container. When identifying an existing container name may be a name or a long or short container ID.
  #   auto_remove: False # not required. Enable auto-removal of the container on daemon side when the container's process exits.
  #   blkio_weight:  # not required. Block IO (relative weight), between 10 and 1000.
  #   capabilities:  # not required. List of capabilities to add to the container.
  #   cap_drop:  # not required. List of capabilities to drop from the container.
  #   cleanup: False # not required. Use with I(detach=false) to remove the container after successful execution.
  #   command:  # not required. Command to execute when the container starts. A command may be either a string or a list. Prior to version 2.4, strings were split on commas.
  #   comparisons:  # not required. Allows to specify how properties of existing containers are compared with module options to decide whether the container should be recreated / updated or not. Only options which correspond to the state of a container as handled by the Docker daemon can be specified, as well as C(networks). Must be a dictionary specifying for an option one of the keys C(strict), C(ignore) and C(allow_more_present). If C(strict) is specified, values are tested for equality, and changes always result in updating or restarting. If C(ignore) is specified, changes are ignored. C(allow_more_present) is allowed only for lists, sets and dicts. If it is specified for lists or sets, the container will only be updated or restarted if the module option contains a value which is not present in the container's options. If the option is specified for a dict, the container will only be updated or restarted if the module option contains a key which isn't present in the container's option, or if the value of a key present differs. The wildcard option C(*) can be used to set one of the default values C(strict) or C(ignore) to *all* comparisons which are not explicitly set to other values. See the examples for details.
  #   cpu_period:  # not required. Limit CPU CFS (Completely Fair Scheduler) period.
  #   cpu_quota:  # not required. Limit CPU CFS (Completely Fair Scheduler) quota.
  #   cpuset_cpus:  # not required. CPUs in which to allow execution C(1,3) or C(1-3).
  #   cpuset_mems:  # not required. Memory nodes (MEMs) in which to allow execution C(0-3) or C(0,1).
  #   cpu_shares:  # not required. CPU shares (relative weight).
  #   detach: True # not required. Enable detached mode to leave the container running in background. If disabled, the task will reflect the status of the container run (failed if the command failed).
  #   devices:  # not required. List of host device bindings to add to the container. Each binding is a mapping expressed in the format C(<path_on_host>:<path_in_container>:<cgroup_permissions>).
  #   device_read_bps:  # not required. List of device path and read rate (bytes per second) from device.
  #   device_write_bps:  # not required. List of device and write rate (bytes per second) to device.
  #   device_read_iops:  # not required. List of device and read rate (IO per second) from device.
  #   device_write_iops:  # not required. List of device and write rate (IO per second) to device.
  #   dns_opts:  # not required. List of DNS options.
  #   dns_servers:  # not required. List of custom DNS servers.
  #   dns_search_domains:  # not required. List of custom DNS search domains.
  #   domainname:  # not required. Container domainname.
  #   env:  # not required. Dictionary of key,value pairs. Values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (e.g. C("true")) in order to avoid data loss.
  #   env_file:  # not required. Path to a file, present on the target, containing environment variables I(FOO=BAR). If variable also present in I(env), then the I(env) value will override.
  #   entrypoint:  # not required. Command that overwrites the default C(ENTRYPOINT) of the image.
  #   etc_hosts:  # not required. Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's C(/etc/hosts) file.
  #   exposed_ports:  # not required. List of additional container ports which informs Docker that the container listens on the specified network ports at runtime. If the port is already exposed using C(EXPOSE) in a Dockerfile, it does not need to be exposed again.
  #   force_kill: False # not required. Use the kill command when stopping a running container.
  #   groups:  # not required. List of additional group names and/or IDs that the container process will run as.
  #   healthcheck:  # not required. Configure a check that is run to determine whether or not containers for this service are "healthy". See the docs for the L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck) for details on how healthchecks work. I(interval), I(timeout) and I(start_period) are specified as durations. They accept duration as a string in a format that look like: C(5h34m56s), C(1m30s) etc. The supported units are C(us), C(ms), C(s), C(m) and C(h).
  #   hostname:  # not required. The container's hostname.
  #   ignore_image: False # not required. When I(state) is C(present) or C(started), the module compares the configuration of an existing container to requested configuration. The evaluation includes the image version. If the image version in the registry does not match the container, the container will be recreated. You can stop this behavior by setting I(ignore_image) to C(True). *Warning:* This option is ignored if C(image: ignore) or C(*: ignore) is specified in the I(comparisons) option.
  #   image:  # not required. Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, C(latest) will be used. Can also be an image ID. If this is the case, the image is assumed to be available locally. The I(pull) option is ignored for this case.
  #   init: False # not required. Run an init inside the container that forwards signals and reaps processes. This option requires Docker API >= 1.25.
  #   interactive: False # not required. Keep stdin open after a container is launched, even if not attached.
  #   ipc_mode:  # not required. Set the IPC mode for the container. Can be one of C(container:<name|id>) to reuse another container's IPC namespace or C(host) to use the host's IPC namespace within the container.
  #   keep_volumes: True # not required. Retain volumes associated with a removed container.
  #   kill_signal:  # not required. Override default signal used to kill a running container.
  #   kernel_memory:  # not required. Kernel memory limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Minimum is C(4M). Omitting the unit defaults to bytes.
  #   labels:  # not required. Dictionary of key value pairs.
  #   links:  # not required. List of name aliases for linked containers in the format C(container_name:alias). Setting this will force container to be restarted.
  #   log_driver:  # not required. Specify the logging driver. Docker uses C(json-file) by default. See L(here,https://docs.docker.com/config/containers/logging/configure/) for possible choices.
  #   log_options:  # not required. Dictionary of options specific to the chosen I(log_driver). See U(https://docs.docker.com/engine/admin/logging/overview/) for details.
  #   mac_address:  # not required. Container MAC address (e.g. 92:d0:c6:0a:29:33).
  #   memory: 0 # not required. Memory limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Omitting the unit defaults to bytes.
  #   memory_reservation:  # not required. Memory soft limit in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Omitting the unit defaults to bytes.
  #   memory_swap:  # not required. Total memory limit (memory + swap) in format C(<number>[<unit>]). Number is a positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Omitting the unit defaults to bytes.
  #   memory_swappiness:  # not required. Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100. If not set, the value will be remain the same if container exists and will be inherited from the host machine if it is (re-)created.
  #   mounts:  # not required. Specification for mounts to be added to the container. More powerful alternative to I(volumes).
  #   network_mode:  # not required. Connect the container to a network. Choices are C(bridge), C(host), C(none) or C(container:<name|id>).
  #   userns_mode:  # not required. Set the user namespace mode for the container. Currently, the only valid value are C(host) and the empty string.
  #   networks:  # not required. List of networks the container belongs to. For examples of the data structure and usage see EXAMPLES below. To remove a container from one or more networks, use the I(purge_networks) option. Note that as opposed to C(docker run ...), M(docker_container) does not remove the default network if I(networks) is specified. You need to explicitly use I(purge_networks) to enforce the removal of the default network (and all other networks not explicitly mentioned in I(networks)). Alternatively, use the I(networks_cli_compatible) option, which will be enabled by default from Ansible 2.12 on.
  #   networks_cli_compatible:  # not required. When networks are provided to the module via the I(networks) option, the module behaves differently than C(docker run --network): C(docker run --network other) will create a container with network C(other) attached, but the default network not attached. This module with I(networks: {name: other}) will create a container with both C(default) and C(other) attached. If I(purge_networks) is set to C(yes), the C(default) network will be removed afterwards. If I(networks_cli_compatible) is set to C(yes), this module will behave as C(docker run --network) and will *not* add the default network if I(networks) is specified. If I(networks) is not specified, the default network will be attached. Note that docker CLI also sets I(network_mode) to the name of the first network added if C(--network) is specified. For more compatibility with docker CLI, you explicitly have to set I(network_mode) to the name of the first network you're adding. Current value is C(no). A new default of C(yes) will be set in Ansible 2.12.
  #   oom_killer:  # not required. Whether or not to disable OOM Killer for the container.
  #   oom_score_adj:  # not required. An integer value containing the score given to the container in order to tune OOM killer preferences.
  #   output_logs: False # not required. If set to true, output of the container command will be printed. Only effective when I(log_driver) is set to C(json-file) or C(journald).
  #   paused: False # not required. Use with the started state to pause running processes inside the container.
  #   pid_mode:  # not required. Set the PID namespace mode for the container. Note that Docker SDK for Python < 2.0 only supports C(host). Newer versions of the Docker SDK for Python (docker) allow all values supported by the Docker daemon.
  #   pids_limit:  # not required. Set PIDs limit for the container. It accepts an integer value. Set C(-1) for unlimited PIDs.
  #   privileged: False # not required. Give extended privileges to the container.
  #   published_ports:  # not required. List of ports to publish from the container to the host. Use docker CLI syntax: C(8000), C(9000:8000), or C(0.0.0.0:9000:8000), where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface. Port ranges can be used for source and destination ports. If two ranges with different lengths are specified, the shorter range will be used. Bind addresses must be either IPv4 or IPv6 addresses. Hostnames are *not* allowed. This is different from the C(docker) command line utility. Use the L(dig lookup,../lookup/dig.html) to resolve hostnames. A value of C(all) will publish all exposed container ports to random host ports, ignoring any other mappings. If I(networks) parameter is provided, will inspect each network to see if there exists a bridge network with optional parameter C(com.docker.network.bridge.host_binding_ipv4). If such a network is found, then published ports where no host IP address is specified will be bound to the host IP pointed to by C(com.docker.network.bridge.host_binding_ipv4). Note that the first bridge network with a C(com.docker.network.bridge.host_binding_ipv4) value encountered in the list of I(networks) is the one that will be used.
  #   pull: False # not required. If true, always pull the latest version of an image. Otherwise, will only pull an image when missing. *Note:* images are only pulled when specified by name. If the image is specified as a image ID (hash), it cannot be pulled.
  #   purge_networks: False # not required. Remove the container from ALL networks not included in I(networks) parameter. Any default networks such as C(bridge), if not found in I(networks), will be removed as well.
  #   read_only: False # not required. Mount the container's root file system as read-only.
  #   recreate: False # not required. Use with present and started states to force the re-creation of an existing container.
  #   restart: False # not required. Use with started state to force a matching container to be stopped and restarted.
  #   restart_policy: no # not required. choices: no;on-failure;always;unless-stopped. Container restart policy. Place quotes around C(no) option.
  #   restart_retries:  # not required. Use with restart policy to control maximum number of restart attempts.
  #   runtime:  # not required. Runtime to use for the container.
  #   shm_size:  # not required. Size of C(/dev/shm) in format C(<number>[<unit>]). Number is positive integer. Unit can be C(B) (byte), C(K) (kibibyte, 1024B), C(M) (mebibyte), C(G) (gibibyte), C(T) (tebibyte), or C(P) (pebibyte). Omitting the unit defaults to bytes. If you omit the size entirely, Docker daemon uses C(64M).
  #   security_opts:  # not required. List of security options in the form of C("label:user:User").
  #   state: absent # not required. choices: absent;present;stopped;started. C(absent) - A container matching the specified name will be stopped and removed. Use I(force_kill) to kill the container rather than stopping it. Use I(keep_volumes) to retain volumes associated with the removed container. C(present) - Asserts the existence of a container matching the name and any provided configuration parameters. If no container matches the name, a container will be created. If a container matches the name but the provided configuration does not match, the container will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the requested config. C(started) - Asserts that the container is first C(present), and then if the container is not running moves it to a running state. Use I(restart) to force a matching container to be stopped and restarted. C(stopped) - Asserts that the container is first C(present), and then if the container is running moves it to a stopped state. To control what will be taken into account when comparing configuration, see the I(comparisons) option. To avoid that the image version will be taken into account, you can also use the I(ignore_image) option. Use the I(recreate) option to always force re-creation of a matching container, even if it is running. If the container should be killed instead of stopped in case it needs to be stopped for recreation, or because I(state) is C(stopped), please use the I(force_kill) option. Use I(keep_volumes) to retain volumes associated with a removed container. Use I(keep_volumes) to retain volumes associated with a removed container.
  #   stop_signal:  # not required. Override default signal used to stop the container.
  #   stop_timeout:  # not required. Number of seconds to wait for the container to stop before sending C(SIGKILL). When the container is created by this module, its C(StopTimeout) configuration will be set to this value. When the container is stopped, will be used as a timeout for stopping the container. In case the container has a custom C(StopTimeout) configuration, the behavior depends on the version of the docker daemon. New versions of the docker daemon will always use the container's configured C(StopTimeout) value if it has been configured.
  #   trust_image_content: False # not required. If C(yes), skip image verification.
  #   tmpfs:  # not required. Mount a tmpfs directory.
  #   tty: False # not required. Allocate a pseudo-TTY.
  #   ulimits:  # not required. List of ulimit options. A ulimit is specified as C(nofile:262144:262144).
  #   sysctls:  # not required. Dictionary of key,value pairs.
  #   user:  # not required. Sets the username or UID used and optionally the groupname or GID for the specified command. Can be of the forms C(user), C(user:group), C(uid), C(uid:gid), C(user:gid) or C(uid:group).
  #   uts:  # not required. Set the UTS namespace mode for the container.
  #   volumes:  # not required. List of volumes to mount within the container. Use docker CLI-style syntax: C(/host:/container[:mode]) Mount modes can be a comma-separated list of various modes such as C(ro), C(rw), C(consistent), C(delegated), C(cached), C(rprivate), C(private), C(rshared), C(shared), C(rslave), C(slave), and C(nocopy). Note that the docker daemon might not support all modes and combinations of such modes. SELinux hosts can additionally use C(z) or C(Z) to use a shared or private label for the volume. Note that Ansible 2.7 and earlier only supported one mode, which had to be one of C(ro), C(rw), C(z), and C(Z).
  #   volume_driver:  # not required. The container volume driver.
  #   volumes_from:  # not required. List of container names or IDs to get volumes from.
  #   working_dir:  # not required. Path to the working directory.
  #   docker_host: unix://var/run/docker.sock # not required. The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string. For example, C(tcp://192.0.2.23:2376). If TLS is used to encrypt the connection, the module will automatically replace C(tcp) in the connection URL with C(https). If the value is not specified in the task, the value of environment variable C(DOCKER_HOST) will be used instead. If the environment variable is not set, the default value will be used.
  #   tls_hostname: localhost # not required. When verifying the authenticity of the Docker Host server, provide the expected name of the server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_HOSTNAME) will be used instead. If the environment variable is not set, the default value will be used.
  #   api_version: auto # not required. The version of the Docker API running on the Docker Host. Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon. If the value is not specified in the task, the value of environment variable C(DOCKER_API_VERSION) will be used instead. If the environment variable is not set, the default value will be used.
  #   timeout: 60 # not required. The maximum amount of time in seconds to wait on a response from the API. If the value is not specified in the task, the value of environment variable C(DOCKER_TIMEOUT) will be used instead. If the environment variable is not set, the default value will be used.
  #   ca_cert:  # not required. Use a CA certificate when performing server verification by providing the path to a CA certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(ca.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
  #   client_cert:  # not required. Path to the client's TLS certificate file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(cert.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
  #   client_key:  # not required. Path to the client's TLS key file. If the value is not specified in the task and the environment variable C(DOCKER_CERT_PATH) is set, the file C(key.pem) from the directory specified in the environment variable C(DOCKER_CERT_PATH) will be used.
  #   ssl_version:  # not required. Provide a valid SSL version number. Default value determined by ssl.py module. If the value is not specified in the task, the value of environment variable C(DOCKER_SSL_VERSION) will be used instead.
  #   tls: False # not required. Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if I(validate_certs) is set to C(yes) as well, it will take precedence. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS) will be used instead. If the environment variable is not set, the default value will be used.
  #   validate_certs: False # not required. Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server. If the value is not specified in the task, the value of environment variable C(DOCKER_TLS_VERIFY) will be used instead. If the environment variable is not set, the default value will be used.
  #   debug: False # not required. Debug mode